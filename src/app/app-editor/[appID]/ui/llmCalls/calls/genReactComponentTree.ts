"use client";

import type * as webllm from "@mlc-ai/web-llm";
import { systemPromptPureText } from "../persona/systemPromptPureText";
import { llmRequestToFileStream } from "../common/llmRequestToFileStream";

export const genReactComponentTree = async ({
    slot,
    userPrompt,
    featuresText = "",
    engine,
    manager,
}) => {
    ///////////////////////////////////////////////////////////////////////////////////
    // manifest
    ///////////////////////////////////////////////////////////////////////////////////
    let messages: webllm.ChatCompletionMessageParam[] = [
        {
            role: `system`,
            content: `${systemPromptPureText}`,
        },

        {
            role: "assistant",
            content: `here's the original "user-requirements.txt" from the user
${userPrompt}`,
        },

        {
            role: "assistant",
            content: `here's the "features and tutorials.txt" generated by an AI senior product manager
${featuresText}`,
        },

        // {
        //             role: "assistant",
        //             content: `
        // # Instructio

        // ## Design Thinking Requirements:
        //     1. Oragnise the text in a neat and tidy way
        //
        //     3. ponder bible proverbs scriptures for wisidom when designing the system,
        //     4. learn from the wisdom of single source of truth, constant values, pure functions

        // ## Format Requirements
        //     1. Use markdown
        //     2. Use emoji
        //     3. Use indentation
        //     4. NEVER Wrap text with ** in markdown
        //     5. NEVER USE ** in markdown
        //     5. NEVER Bold Text in markdown
        //     6. Always add a new line for each new item (better spacing...)
        //     7. Must follow the Output format below:
        //     8. use * as a new item
        //     9. use - as a property of that new item
        // `,
        //         },

        {
            role: "assistant",
            content: `
# Instruction

You are a senior product manager:
Review the current "user requirements" and write a new "product requirement definition"
Rewrite wordings to better english and optimise for LLM reading

- use Zustnad Store Management

- rename uniquely and correctly according to the "features and tutorials.txt" Document: <Layout>
- rename uniquely and correctly according to the "features and tutorials.txt" Document: <SlotName> 
- rename uniquely and correctly according to the "features and tutorials.txt" Document: <Name> 
- rename uniquely and correctly according to the "features and tutorials.txt" Document: <SubName> 
- 

# Output Template in Pure Text Format

## Front End Pages:

Pages:

* WebPage
    - WebPage's Route & Params: [...]
    - WebPage's Description: [...]
    - WebPage's Access Level Securirty Requirement: [...]

    * WebPage's ReactJS 
            - Name : [Name]
            - description: [description]
            - Components Overview
            \`\`\`jsx
            export function Page () {
                return <Layout>
                    <SlotName>
                        <Name>
                            <SubName></SubName>
                            [...]
                        </Name>
                        <Name>
                            <SubName></SubName>
                            [...]
                        </Name>
                        [...]
                    </SlotName>
                    [...]
                </Layout>
            }

\`\`\`
`,
        },
        {
            role: "user",
            content: `Write the Front End Pages Section.`,
        },
    ];

    const request: webllm.ChatCompletionRequestStreaming = {
        seed: 19900831,
        stream: true,
        stream_options: { include_usage: true },
        messages: messages,
        temperature: 0,
    };

    let path = `/docs/genReactComponentTree.md`;

    await llmRequestToFileStream({
        path: path,
        request: request,
        engine,
        slot: slot,
    });

    ///////////////////////////////////////////////////////////////////////////////////
    // usecase
    ///////////////////////////////////////////////////////////////////////////////////
};

/*

// youtube@t3.gg

* ReactJS Component 
    - Name : [Name]
    - description: [description]
    - ReactJS SubComponents:
        * ReactJS SubComponent 
            - Name : [Name]
            - description: [description]
        * ReactJS SubComponent 
            - Name : [Name]
            - description: [description]
        * ReactJS SubComponent 
            - Name : [Name]
            - description: [description]
* ReactJS Component 
    - Name : [Name]
    - description: [description]
    - ReactJS SubComponents:
        * ReactJS SubComponent 
            - Name : [Name]
            - description: [description]
        * ReactJS SubComponent 
            - Name : [Name]
            - description: [description]
        * ReactJS SubComponent 
            - Name : [Name]
            - description: [description]

*/
