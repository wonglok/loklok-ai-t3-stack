{
    "executionPlan": {
        "title": "Execution Plan for Vibe Coding Platform with Local Storage",
        "description": "This JSON outlines the phases and tasks for processing user requirements into a web app using LLMs, with file storage in browser localStorage (array of {fileName: string, codeContent: string}). Each task includes 'canBeParallel' (true if it can run concurrently with non-dependent tasks) and 'dependencies' (array of task IDs it requires to complete first). Tasks are assigned unique IDs for reference.",
        "techStack": "Mongoose + MongoDB (database), tRPC (server-side APIs), Next.js + React.js (frontend), React Three Fiber (3D integration), localStorage (browser file storage)",
        "phases": [
            {
                "name": "Phase 1: Requirements Refinement",
                "goal": "Transform user input into structured specs",
                "tasks": [
                    {
                        "id": "1.1",
                        "description": "Parse input for key elements (features, flows, data models, 3D reqs)",
                        "canBeParallel": false,
                        "dependencies": [],
                        "readFiles": [],
                        "wroteFiles": [],
                        "systemPrompt": "You are an expert requirements analyst for a vibe coding platform (like Base44 or Lovable). Parse the user’s natural language input to identify key features, user flows, data models, and 3D visualization requirements. Output a structured JSON object with sections for features, flows, models, and 3D needs. Ensure clarity and identify ambiguities. Use vibe coding principles: simplicity, rapid prototyping, and accessibility for non-coders.",
                        "userInputPrompt": "Parse the following user requirements: [INSERT USER REQUIREMENTS HERE]. Identify key elements: features (e.g., task creation), user flows (e.g., create task to view), data models (e.g., Task with title), and 3D requirements (e.g., visualize tasks in 3D space). Output as JSON with sections: { features: [], flows: [], models: [], 3d: [] }."
                    },
                    {
                        "id": "1.2",
                        "description": "Prioritize using MoSCoW method",
                        "canBeParallel": false,
                        "dependencies": ["1.1"],
                        "readFiles": [],
                        "wroteFiles": [],
                        "systemPrompt": "You are a product manager for a vibe coding platform. Prioritize the provided requirements using the MoSCoW method (Must-have, Should-have, Could-have, Won’t-have). Output a JSON object mapping each feature, flow, model, and 3D requirement to its priority. Ensure alignment with rapid prototyping and non-coder accessibility.",
                        "userInputPrompt": "Given the parsed requirements: [OUTPUT_OF_1_1], prioritize each feature, flow, data model, and 3D requirement using the MoSCoW method. Output as JSON: { must: [], should: [], could: [], wont: [] }."
                    },
                    {
                        "id": "1.3",
                        "description": "Identify gaps/assumptions and output refined specs document",
                        "canBeParallel": false,
                        "dependencies": ["1.2"],
                        "readFiles": [],
                        "wroteFiles": [],
                        "systemPrompt": "You are an expert requirements analyst for a vibe coding platform. Review the prioritized requirements, identify gaps (e.g., missing auth details) and assumptions (e.g., JWT for auth). Output a refined specs document in Markdown, including features, flows, models, 3D requirements, assumptions, and clarification questions. Ensure the specs are clear for non-technical users.",
                        "userInputPrompt": "Given the prioritized requirements: [OUTPUT_OF_1_2], identify gaps and assumptions. Output a Markdown document with sections: Features, User Flows, Data Models, 3D Requirements, Assumptions, Clarification Questions. Example assumption: 'Assume JWT authentication if not specified.'"
                    }
                ]
            },
            {
                "name": "Phase 2: System Design",
                "goal": "Create blueprints for components",
                "tasks": [
                    {
                        "id": "2.1",
                        "description": "Design database schemas (Mongoose models)",
                        "canBeParallel": false,
                        "dependencies": ["1.3"],
                        "readFiles": [],
                        "wroteFiles": [],
                        "systemPrompt": "You are a database architect for a vibe coding platform using Mongoose and MongoDB. Design Mongoose schemas based on the provided specs. Include fields, types, validations, relationships, and indexes. Output a JSON object listing schemas with TypeScript-like syntax. Ensure normalized schemas for scalability.",
                        "userInputPrompt": "Using the refined specs: [OUTPUT_OF_1_3], design Mongoose schemas for data models (e.g., Task with title, description, 3D coordinates). Output as JSON: { schemas: [{ name: string, fields: [], relationships: [], indexes: [] }] }."
                    },
                    {
                        "id": "2.2",
                        "description": "Design tRPC APIs (routers/procedures)",
                        "canBeParallel": false,
                        "dependencies": ["2.1"],
                        "readFiles": [],
                        "wroteFiles": [],
                        "systemPrompt": "You are a backend developer for a vibe coding platform using tRPC with Next.js. Design type-safe tRPC APIs based on the specs and schemas. Define routers, queries, and mutations with input/output types using Zod. Include authentication requirements. Output a JSON object listing routers and procedures.",
                        "userInputPrompt": "Using the refined specs: [OUTPUT_OF_1_3] and schemas: [OUTPUT_OF_2_1], design tRPC routers and procedures (e.g., task.create, task.getAll). Output as JSON: { routers: [{ name: string, procedures: [{ name: string, type: 'query' | 'mutation', input: string, output: string, auth: boolean }] }] }."
                    },
                    {
                        "id": "2.3",
                        "description": "Design frontend pages, components, and 3D scenes",
                        "canBeParallel": false,
                        "dependencies": ["2.2"],
                        "readFiles": [],
                        "wroteFiles": [],
                        "systemPrompt": "You are a frontend designer for a vibe coding platform using Next.js, React.js, and React Three Fiber. Design pages, components, and 3D scenes based on the specs. Output a JSON object with page descriptions (purpose, elements, interactions), component list, and 3D scene details (meshes, interactions). Ensure mobile-responsive, intuitive UIs.",
                        "userInputPrompt": "Using the refined specs: [OUTPUT_OF_1_3] and APIs: [OUTPUT_OF_2_2], design Next.js pages, React components, and React Three Fiber scenes. Output as JSON: { pages: [{ name: string, purpose: string, elements: [], interactions: [] }], components: [], 3dScenes: [] }."
                    },
                    {
                        "id": "2.4",
                        "description": "Create integration map and output design doc",
                        "canBeParallel": false,
                        "dependencies": ["2.3"],
                        "readFiles": [],
                        "wroteFiles": [],
                        "systemPrompt": "You are a system architect for a vibe coding platform. Create an integration map linking database, APIs, frontend, and 3D components. Output a Markdown design document detailing the architecture, file structure, and integration points. Ensure clarity for non-technical users.",
                        "userInputPrompt": "Using schemas: [OUTPUT_OF_2_1], APIs: [OUTPUT_OF_2_2], and frontend designs: [OUTPUT_OF_2_3], create an integration map. Output a Markdown document with sections: Architecture Overview, File Structure, Integration Points (e.g., tRPC client in Next.js)."
                    }
                ]
            },
            {
                "name": "Phase 3: Modular Code Generation",
                "goal": "Generate code in parallel modules via secondary LLMs and store in localStorage",
                "tasks": [
                    {
                        "id": "3.1",
                        "description": "Backend: Database & Models (Generate Mongoose schemas and connection setup)",
                        "canBeParallel": true,
                        "dependencies": ["2.4"],
                        "readFiles": [],
                        "wroteFiles": [],
                        "systemPrompt": "You are a backend developer for a vibe coding platform using Mongoose and MongoDB. Generate TypeScript code for Mongoose schemas and connection setup based on the design. Output code as strings for specified files. Ensure type-safety and best practices (e.g., error handling).",
                        "userInputPrompt": "Using the design doc: [OUTPUT_OF_2_4] and schemas: [OUTPUT_OF_2_1], generate TypeScript code for Mongoose schemas and MongoDB connection. Output as JSON: { files: [{ fileName: '/models/task.ts', codeContent: string }, { fileName: '/lib/db.ts', codeContent: string }] }."
                    },
                    {
                        "id": "3.1.1",
                        "description": "Write Mongoose schema and connection files to localStorage (e.g., {fileName: '/models/task.ts', codeContent: string})",
                        "canBeParallel": true,
                        "dependencies": ["3.1"],
                        "readFiles": [],
                        "wroteFiles": [
                            {
                                "path": "/models/task.ts",
                                "content": ""
                            },
                            {
                                "path": "/lib/db.ts",
                                "content": ""
                            }
                        ],
                        "systemPrompt": "You are a file manager for a vibe coding platform. Store the provided code files in localStorage as an array of {fileName: string, codeContent: string}. Ensure no overwrites without validation. Output a confirmation JSON: { status: 'success', writtenFiles: string[] }.",
                        "userInputPrompt": "Store the generated code: [OUTPUT_OF_3_1] in localStorage under key 'codeFiles'. Output: { status: 'success', writtenFiles: ['/models/task.ts', '/lib/db.ts'] }."
                    },
                    {
                        "id": "3.2",
                        "description": "Backend: tRPC APIs (Create routers, procedures, integrate with models)",
                        "canBeParallel": true,
                        "dependencies": ["2.4", "3.1"],
                        "readFiles": [],
                        "wroteFiles": [],
                        "systemPrompt": "You are a backend developer for a vibe coding platform using tRPC with Next.js. Generate TypeScript code for tRPC routers and procedures, integrating with Mongoose models. Use Zod for input/output validation. Output code as strings for specified files.",
                        "userInputPrompt": "Using the design doc: [OUTPUT_OF_2_4], APIs: [OUTPUT_OF_2_2], and schemas: [OUTPUT_OF_3_1], generate tRPC routers and procedures. Output as JSON: { files: [{ fileName: '/trpc/routers/task.ts', codeContent: string }, { fileName: '/trpc/index.ts', codeContent: string }] }."
                    },
                    {
                        "id": "3.2.1",
                        "description": "Write tRPC router files to localStorage (e.g., {fileName: '/trpc/routers/task.ts', codeContent: string})",
                        "canBeParallel": true,
                        "dependencies": ["3.2"],
                        "readFiles": [],
                        "wroteFiles": [
                            {
                                "path": "/trpc/routers/task.ts",
                                "content": ""
                            },
                            {
                                "path": "/trpc/index.ts",
                                "content": ""
                            }
                        ],
                        "systemPrompt": "You are a file manager for a vibe coding platform. Store the provided code files in localStorage as an array of {fileName: string, codeContent: string}. Ensure no overwrites without validation. Output a confirmation JSON: { status: 'success', writtenFiles: string[] }.",
                        "userInputPrompt": "Store the generated code: [OUTPUT_OF_3_2] in localStorage under key 'codeFiles'. Output: { status: 'success', writtenFiles: ['/trpc/routers/task.ts', '/trpc/index.ts'] }."
                    },
                    {
                        "id": "3.3",
                        "description": "Frontend: Pages & Routing (Build Next.js pages with tRPC integration)",
                        "canBeParallel": true,
                        "dependencies": ["2.4"],
                        "readFiles": [],
                        "wroteFiles": [],
                        "systemPrompt": "You are a frontend developer for a vibe coding platform using Next.js and React.js. Generate TypeScript code for Next.js pages with App Router, integrating tRPC client. Ensure mobile-responsive design. Output code as strings for specified files.",
                        "userInputPrompt": "Using the design doc: [OUTPUT_OF_2_4] and page designs: [OUTPUT_OF_2_3], generate Next.js pages with tRPC integration. Output as JSON: { files: [{ fileName: '/app/page.tsx', codeContent: string }, { fileName: '/app/tasks/page.tsx', codeContent: string }] }."
                    },
                    {
                        "id": "3.3.1",
                        "description": "Write Next.js page files to localStorage (e.g., {fileName: '/app/tasks/page.tsx', codeContent: string})",
                        "canBeParallel": true,
                        "dependencies": ["3.3"],
                        "readFiles": [],
                        "wroteFiles": [
                            {
                                "path": "/app/page.tsx",
                                "content": ""
                            },
                            {
                                "path": "/app/tasks/page.tsx",
                                "content": ""
                            }
                        ],
                        "systemPrompt": "You are a file manager for a vibe coding platform. Store the provided code files in localStorage as an array of {fileName: string, codeContent: string}. Ensure no overwrites without validation. Output a confirmation JSON: { status: 'success', writtenFiles: string[] }.",
                        "userInputPrompt": "Store the generated code: [OUTPUT_OF_3_3] in localStorage under key 'codeFiles'. Output: { status: 'success', writtenFiles: ['/app/page.tsx', '/app/tasks/page.tsx'] }."
                    },
                    {
                        "id": "3.4",
                        "description": "Frontend: React Components (Generate reusable components)",
                        "canBeParallel": true,
                        "dependencies": ["2.4", "3.3"],
                        "readFiles": [],
                        "wroteFiles": [],
                        "systemPrompt": "You are a frontend developer for a vibe coding platform using React.js with TypeScript. Generate reusable React components with TypeScript props and hooks. Ensure accessibility and Tailwind CSS styling. Output code as strings for specified files.",
                        "userInputPrompt": "Using the design doc: [OUTPUT_OF_2_4] and component designs: [OUTPUT_OF_2_3], generate React components (e.g., TaskCard). Output as JSON: { files: [{ fileName: '/components/TaskCard.tsx', codeContent: string }, { fileName: '/components/3DControls.tsx', codeContent: string }] }."
                    },
                    {
                        "id": "3.4.1",
                        "description": "Write React component files to localStorage (e.g., {fileName: '/components/TaskCard.tsx', codeContent: string})",
                        "canBeParallel": true,
                        "dependencies": ["3.4"],
                        "readFiles": [],
                        "wroteFiles": [
                            {
                                "path": "/components/TaskCard.tsx",
                                "content": ""
                            },
                            {
                                "path": "/components/3DControls.tsx",
                                "content": ""
                            }
                        ],
                        "systemPrompt": "You are a file manager for a vibe coding platform. Store the provided code files in localStorage as an array of {fileName: string, codeContent: string}. Ensure no overwrites without validation. Output a confirmation JSON: { status: 'success', writtenFiles: string[] }.",
                        "userInputPrompt": "Store the generated code: [OUTPUT_OF_3_4] in localStorage under key 'codeFiles'. Output: { status: 'success', writtenFiles: ['/components/TaskCard.tsx', '/components/3DControls.tsx'] }."
                    },
                    {
                        "id": "3.5",
                        "description": "3D Integration: React Three Fiber (Implement 3D scenes and components)",
                        "canBeParallel": true,
                        "dependencies": ["2.4", "3.4"],
                        "readFiles": [],
                        "wroteFiles": [],
                        "systemPrompt": "You are a 3D developer for a vibe coding platform using React Three Fiber. Generate TypeScript code for 3D scenes and components, integrating with React and tRPC data. Use @react-three/drei for controls. Output code as strings for specified files.",
                        "userInputPrompt": "Using the design doc: [OUTPUT_OF_2_4] and 3D designs: [OUTPUT_OF_2_3], generate React Three Fiber components (e.g., 3DCanvas). Output as JSON: { files: [{ fileName: '/components/3DCanvas.tsx', codeContent: string }, { fileName: '/components/TaskMesh.tsx', codeContent: string }] }."
                    },
                    {
                        "id": "3.5.1",
                        "description": "Write React Three Fiber component files to localStorage (e.g., {fileName: '/components/3DCanvas.tsx', codeContent: string})",
                        "canBeParallel": true,
                        "dependencies": ["3.5"],
                        "readFiles": [],
                        "wroteFiles": [
                            {
                                "path": "/components/3DCanvas.tsx",
                                "content": ""
                            },
                            {
                                "path": "/components/TaskMesh.tsx",
                                "content": ""
                            }
                        ],
                        "systemPrompt": "You are a file manager for a vibe coding platform. Store the provided code files in localStorage as an array of {fileName: string, codeContent: string}. Ensure no overwrites without validation. Output a confirmation JSON: { status: 'success', writtenFiles: string[] }.",
                        "userInputPrompt": "Store the generated code: [OUTPUT_OF_3_5] in localStorage under key 'codeFiles'. Output: { status: 'success', writtenFiles: ['/components/3DCanvas.tsx', '/components/TaskMesh.tsx'] }."
                    },
                    {
                        "id": "3.6",
                        "description": "Integration: Read all files from localStorage and assemble into Next.js project (via Integrator LLM)",
                        "canBeParallel": false,
                        "dependencies": [
                            "3.1.1",
                            "3.2.1",
                            "3.3.1",
                            "3.4.1",
                            "3.5.1"
                        ],
                        "readFiles": [
                            {
                                "path": "/models/task.ts",
                                "placeholderReplacerToken": "MODELS_TASK_CONTENT"
                            },
                            {
                                "path": "/lib/db.ts",
                                "placeholderReplacerToken": "LIB_DB_CONTENT"
                            },
                            {
                                "path": "/trpc/routers/task.ts",
                                "placeholderReplacerToken": "TRPC_ROUTERS_TASK_CONTENT"
                            },
                            {
                                "path": "/trpc/index.ts",
                                "placeholderReplacerToken": "TRPC_INDEX_CONTENT"
                            },
                            {
                                "path": "/app/page.tsx",
                                "placeholderReplacerToken": "APP_PAGE_CONTENT"
                            },
                            {
                                "path": "/app/tasks/page.tsx",
                                "placeholderReplacerToken": "APP_TASKS_PAGE_CONTENT"
                            },
                            {
                                "path": "/components/TaskCard.tsx",
                                "placeholderReplacerToken": "COMPONENTS_TASKCARD_CONTENT"
                            },
                            {
                                "path": "/components/3DControls.tsx",
                                "placeholderReplacerToken": "COMPONENTS_3DCONTROLS_CONTENT"
                            },
                            {
                                "path": "/components/3DCanvas.tsx",
                                "placeholderReplacerToken": "COMPONENTS_3DCANVAS_CONTENT"
                            },
                            {
                                "path": "/components/TaskMesh.tsx",
                                "placeholderReplacerToken": "COMPONENTS_TASKMESH_CONTENT"
                            }
                        ],
                        "wroteFiles": [
                            {
                                "path": "/app/layout.tsx",
                                "content": ""
                            },
                            {
                                "path": "/package.json",
                                "content": ""
                            }
                        ],
                        "systemPrompt": "You are an integration engineer for a vibe coding platform. Read code files from localStorage, assemble them into a Next.js project, and generate root layout and package.json. Ensure tRPC, Mongoose, and React Three Fiber integration. Output code as strings for specified files.",
                        "userInputPrompt": "Assemble into a Next.js project with tRPC client, Mongoose connection, and React Three Fiber setup. Generate root layout and package.json. Use the following file contents: [MODELS_TASK_CONTENT] [LIB_DB_CONTENT] [TRPC_ROUTERS_TASK_CONTENT] [TRPC_INDEX_CONTENT] [APP_PAGE_CONTENT] [APP_TASKS_PAGE_CONTENT] [COMPONENTS_TASKCARD_CONTENT] [COMPONENTS_3DCONTROLS_CONTENT] [COMPONENTS_3DCANVAS_CONTENT] [COMPONENTS_TASKMESH_CONTENT]. Output as JSON: { files: [{ fileName: '/app/layout.tsx', codeContent: string }, { fileName: '/package.json', codeContent: string }] }."
                    }
                ]
            },
            {
                "name": "Phase 4: Testing & Validation",
                "goal": "Ensure code works and matches requirements",
                "tasks": [
                    {
                        "id": "4.1",
                        "description": "Generate unit tests for each module and write test files to localStorage",
                        "canBeParallel": true,
                        "dependencies": ["3.6"],
                        "readFiles": [],
                        "wroteFiles": [
                            {
                                "path": "/tests/task.test.ts",
                                "content": ""
                            },
                            {
                                "path": "/tests/api.test.ts",
                                "content": ""
                            }
                        ],
                        "systemPrompt": "You are a test engineer for a vibe coding platform. Generate Jest unit tests for Mongoose models, tRPC APIs, and React components based on the integrated project. Output test code as strings for specified files. Ensure coverage for key functionalities.",
                        "userInputPrompt": "Using the integrated project: [OUTPUT_OF_3_6], generate Jest unit tests for Mongoose models, tRPC APIs, and React components. Output as JSON: { files: [{ fileName: '/tests/task.test.ts', codeContent: string }, { fileName: '/tests/api.test.ts', codeContent: string }] }."
                    },
                    {
                        "id": "4.2",
                        "description": "Read test files from localStorage and run end-to-end tests (simulate flows with 3D viz)",
                        "canBeParallel": false,
                        "dependencies": ["4.1"],
                        "readFiles": [
                            {
                                "path": "/tests/task.test.ts",
                                "placeholderReplacerToken": "TESTS_TASK_CONTENT"
                            },
                            {
                                "path": "/tests/api.test.ts",
                                "placeholderReplacerToken": "TESTS_API_CONTENT"
                            }
                        ],
                        "wroteFiles": [],
                        "systemPrompt": "You are a test engineer for a vibe coding platform. Read test files from localStorage and simulate end-to-end tests for user flows, including 3D visualizations. Output a JSON test report summarizing results and issues.",
                        "userInputPrompt": "Simulate end-to-end tests for user flows (e.g., task creation, 3D visualization). Use the following file contents: [TESTS_TASK_CONTENT] [TESTS_API_CONTENT]. Output a JSON report: { tests: [{ name: string, status: 'pass' | 'fail', details: string }], issues: [] }."
                    },
                    {
                        "id": "4.3",
                        "description": "Iterate on issues (re-generate specific modules and update localStorage if needed)",
                        "canBeParallel": false,
                        "dependencies": ["4.2"],
                        "readFiles": [
                            {
                                "path": "/models/task.ts",
                                "placeholderReplacerToken": "MODELS_TASK_CONTENT"
                            },
                            {
                                "path": "/lib/db.ts",
                                "placeholderReplacerToken": "LIB_DB_CONTENT"
                            },
                            {
                                "path": "/trpc/routers/task.ts",
                                "placeholderReplacerToken": "TRPC_ROUTERS_TASK_CONTENT"
                            },
                            {
                                "path": "/trpc/index.ts",
                                "placeholderReplacerToken": "TRPC_INDEX_CONTENT"
                            },
                            {
                                "path": "/app/page.tsx",
                                "placeholderReplacerToken": "APP_PAGE_CONTENT"
                            },
                            {
                                "path": "/app/tasks/page.tsx",
                                "placeholderReplacerToken": "APP_TASKS_PAGE_CONTENT"
                            },
                            {
                                "path": "/components/TaskCard.tsx",
                                "placeholderReplacerToken": "COMPONENTS_TASKCARD_CONTENT"
                            },
                            {
                                "path": "/components/3DControls.tsx",
                                "placeholderReplacerToken": "COMPONENTS_3DCONTROLS_CONTENT"
                            },
                            {
                                "path": "/components/3DCanvas.tsx",
                                "placeholderReplacerToken": "COMPONENTS_3DCANVAS_CONTENT"
                            },
                            {
                                "path": "/components/TaskMesh.tsx",
                                "placeholderReplacerToken": "COMPONENTS_TASKMESH_CONTENT"
                            }
                        ],
                        "wroteFiles": [
                            {
                                "path": "/models/task.ts",
                                "content": ""
                            },
                            {
                                "path": "/lib/db.ts",
                                "content": ""
                            },
                            {
                                "path": "/trpc/routers/task.ts",
                                "content": ""
                            },
                            {
                                "path": "/trpc/index.ts",
                                "content": ""
                            },
                            {
                                "path": "/app/page.tsx",
                                "content": ""
                            },
                            {
                                "path": "/app/tasks/page.tsx",
                                "content": ""
                            },
                            {
                                "path": "/components/TaskCard.tsx",
                                "content": ""
                            },
                            {
                                "path": "/components/3DControls.tsx",
                                "content": ""
                            },
                            {
                                "path": "/components/3DCanvas.tsx",
                                "content": ""
                            },
                            {
                                "path": "/components/TaskMesh.tsx",
                                "content": ""
                            }
                        ],
                        "systemPrompt": "You are a code repair engineer for a vibe coding platform. Analyze test issues and re-generate specific code files to fix them. Update files in localStorage. Output a JSON object listing updated files and changes made.",
                        "userInputPrompt": "Using the test report: [OUTPUT_OF_4_2], re-generate code to fix issues and update localStorage. Use the following file contents: [MODELS_TASK_CONTENT] [LIB_DB_CONTENT] [TRPC_ROUTERS_TASK_CONTENT] [TRPC_INDEX_CONTENT] [APP_PAGE_CONTENT] [APP_TASKS_PAGE_CONTENT] [COMPONENTS_TASKCARD_CONTENT] [COMPONENTS_3DCONTROLS_CONTENT] [COMPONENTS_3DCANVAS_CONTENT] [COMPONENTS_TASKMESH_CONTENT]. Output as JSON: { updatedFiles: [{ fileName: string, codeContent: string }], changes: [] }."
                    },
                    {
                        "id": "4.4",
                        "description": "Output test report and prepare deployable code from localStorage",
                        "canBeParallel": false,
                        "dependencies": ["4.3"],
                        "readFiles": [
                            {
                                "path": "/models/task.ts",
                                "placeholderReplacerToken": "MODELS_TASK_CONTENT"
                            },
                            {
                                "path": "/lib/db.ts",
                                "placeholderReplacerToken": "LIB_DB_CONTENT"
                            },
                            {
                                "path": "/trpc/routers/task.ts",
                                "placeholderReplacerToken": "TRPC_ROUTERS_TASK_CONTENT"
                            },
                            {
                                "path": "/trpc/index.ts",
                                "placeholderReplacerToken": "TRPC_INDEX_CONTENT"
                            },
                            {
                                "path": "/app/page.tsx",
                                "placeholderReplacerToken": "APP_PAGE_CONTENT"
                            },
                            {
                                "path": "/app/tasks/page.tsx",
                                "placeholderReplacerToken": "APP_TASKS_PAGE_CONTENT"
                            },
                            {
                                "path": "/components/TaskCard.tsx",
                                "placeholderReplacerToken": "COMPONENTS_TASKCARD_CONTENT"
                            },
                            {
                                "path": "/components/3DControls.tsx",
                                "placeholderReplacerToken": "COMPONENTS_3DCONTROLS_CONTENT"
                            },
                            {
                                "path": "/components/3DCanvas.tsx",
                                "placeholderReplacerToken": "COMPONENTS_3DCANVAS_CONTENT"
                            },
                            {
                                "path": "/components/TaskMesh.tsx",
                                "placeholderReplacerToken": "COMPONENTS_TASKMESH_CONTENT"
                            },
                            {
                                "path": "/app/layout.tsx",
                                "placeholderReplacerToken": "APP_LAYOUT_CONTENT"
                            },
                            {
                                "path": "/package.json",
                                "placeholderReplacerToken": "PACKAGE_JSON_CONTENT"
                            }
                        ],
                        "wroteFiles": [
                            {
                                "path": "/test-report.json",
                                "content": ""
                            }
                        ],
                        "systemPrompt": "You are a deployment engineer for a vibe coding platform. Read all code files from localStorage, compile a final test report, and prepare deployable code. Output a JSON test report and a manifest of deployable files.",
                        "userInputPrompt": "Compile a test report and prepare deployable code. Use the following file contents: [MODELS_TASK_CONTENT] [LIB_DB_CONTENT] [TRPC_ROUTERS_TASK_CONTENT] [TRPC_INDEX_CONTENT] [APP_PAGE_CONTENT] [APP_TASKS_PAGE_CONTENT] [COMPONENTS_TASKCARD_CONTENT] [COMPONENTS_3DCONTROLS_CONTENT] [COMPONENTS_3DCANVAS_CONTENT] [COMPONENTS_TASKMESH_CONTENT] [APP_LAYOUT_CONTENT] [PACKAGE_JSON_CONTENT]. Output as JSON: { testReport: { tests: [], issues: [] }, deployableFiles: [] }."
                    }
                ]
            },
            {
                "name": "Phase 5: Deployment & Feedback",
                "goal": "Package for production and gather feedback",
                "tasks": [
                    {
                        "id": "5.1",
                        "description": "Generate deployment scripts (e.g., Vercel, MongoDB Atlas) and include localStorage export function",
                        "canBeParallel": false,
                        "dependencies": ["4.4"],
                        "readFiles": [
                            {
                                "path": "/models/task.ts",
                                "placeholderReplacerToken": "MODELS_TASK_CONTENT"
                            },
                            {
                                "path": "/lib/db.ts",
                                "placeholderReplacerToken": "LIB_DB_CONTENT"
                            },
                            {
                                "path": "/trpc/routers/task.ts",
                                "placeholderReplacerToken": "TRPC_ROUTERS_TASK_CONTENT"
                            },
                            {
                                "path": "/trpc/index.ts",
                                "placeholderReplacerToken": "TRPC_INDEX_CONTENT"
                            },
                            {
                                "path": "/app/page.tsx",
                                "placeholderReplacerToken": "APP_PAGE_CONTENT"
                            },
                            {
                                "path": "/app/tasks/page.tsx",
                                "placeholderReplacerToken": "APP_TASKS_PAGE_CONTENT"
                            },
                            {
                                "path": "/components/TaskCard.tsx",
                                "placeholderReplacerToken": "COMPONENTS_TASKCARD_CONTENT"
                            },
                            {
                                "path": "/components/3DControls.tsx",
                                "placeholderReplacerToken": "COMPONENTS_3DCONTROLS_CONTENT"
                            },
                            {
                                "path": "/components/3DCanvas.tsx",
                                "placeholderReplacerToken": "COMPONENTS_3DCANVAS_CONTENT"
                            },
                            {
                                "path": "/components/TaskMesh.tsx",
                                "placeholderReplacerToken": "COMPONENTS_TASKMESH_CONTENT"
                            },
                            {
                                "path": "/app/layout.tsx",
                                "placeholderReplacerToken": "APP_LAYOUT_CONTENT"
                            },
                            {
                                "path": "/package.json",
                                "placeholderReplacerToken": "PACKAGE_JSON_CONTENT"
                            }
                        ],
                        "wroteFiles": [
                            {
                                "path": "/scripts/deploy.js",
                                "content": ""
                            }
                        ],
                        "systemPrompt": "You are a deployment engineer for a vibe coding platform. Generate deployment scripts for Vercel and MongoDB Atlas, including a function to export localStorage files. Output code as strings for specified files.",
                        "userInputPrompt": "Generate deployment scripts for Vercel and MongoDB Atlas, including a localStorage export function. Use the following file contents: [MODELS_TASK_CONTENT] [LIB_DB_CONTENT] [TRPC_ROUTERS_TASK_CONTENT] [TRPC_INDEX_CONTENT] [APP_PAGE_CONTENT] [APP_TASKS_PAGE_CONTENT] [COMPONENTS_TASKCARD_CONTENT] [COMPONENTS_3DCONTROLS_CONTENT] [COMPONENTS_3DCANVAS_CONTENT] [COMPONENTS_TASKMESH_CONTENT] [APP_LAYOUT_CONTENT] [PACKAGE_JSON_CONTENT]. Output as JSON: { files: [{ fileName: '/scripts/deploy.js', codeContent: string }] }."
                    },
                    {
                        "id": "5.2",
                        "description": "Create AI preview (text-based simulation of app using localStorage files)",
                        "canBeParallel": true,
                        "dependencies": ["5.1"],
                        "readFiles": [
                            {
                                "path": "/models/task.ts",
                                "placeholderReplacerToken": "MODELS_TASK_CONTENT"
                            },
                            {
                                "path": "/lib/db.ts",
                                "placeholderReplacerToken": "LIB_DB_CONTENT"
                            },
                            {
                                "path": "/trpc/routers/task.ts",
                                "placeholderReplacerToken": "TRPC_ROUTERS_TASK_CONTENT"
                            },
                            {
                                "path": "/trpc/index.ts",
                                "placeholderReplacerToken": "TRPC_INDEX_CONTENT"
                            },
                            {
                                "path": "/app/page.tsx",
                                "placeholderReplacerToken": "APP_PAGE_CONTENT"
                            },
                            {
                                "path": "/app/tasks/page.tsx",
                                "placeholderReplacerToken": "APP_TASKS_PAGE_CONTENT"
                            },
                            {
                                "path": "/components/TaskCard.tsx",
                                "placeholderReplacerToken": "COMPONENTS_TASKCARD_CONTENT"
                            },
                            {
                                "path": "/components/3DControls.tsx",
                                "placeholderReplacerToken": "COMPONENTS_3DCONTROLS_CONTENT"
                            },
                            {
                                "path": "/components/3DCanvas.tsx",
                                "placeholderReplacerToken": "COMPONENTS_3DCANVAS_CONTENT"
                            },
                            {
                                "path": "/components/TaskMesh.tsx",
                                "placeholderReplacerToken": "COMPONENTS_TASKMESH_CONTENT"
                            }
                        ],
                        "wroteFiles": [],
                        "systemPrompt": "You are a preview generator for a vibe coding platform. Create a text-based simulation of the app using the provided files. Output a Markdown preview describing the app's UI, flows, and 3D elements.",
                        "userInputPrompt": "Create a text-based simulation of the app. Use the following file contents: [MODELS_TASK_CONTENT] [LIB_DB_CONTENT] [TRPC_ROUTERS_TASK_CONTENT] [TRPC_INDEX_CONTENT] [APP_PAGE_CONTENT] [APP_TASKS_PAGE_CONTENT] [COMPONENTS_TASKCARD_CONTENT] [COMPONENTS_3DCONTROLS_CONTENT] [COMPONENTS_3DCANVAS_CONTENT] [COMPONENTS_TASKMESH_CONTENT]. Output as Markdown with sections: UI Description, User Flows, 3D Simulation."
                    },
                    {
                        "id": "5.3",
                        "description": "Deploy app and prompt user for feedback, providing localStorage export option",
                        "canBeParallel": false,
                        "dependencies": ["5.1", "5.2"],
                        "readFiles": [
                            {
                                "path": "/models/task.ts",
                                "placeholderReplacerToken": "MODELS_TASK_CONTENT"
                            },
                            {
                                "path": "/lib/db.ts",
                                "placeholderReplacerToken": "LIB_DB_CONTENT"
                            },
                            {
                                "path": "/trpc/routers/task.ts",
                                "placeholderReplacerToken": "TRPC_ROUTERS_TASK_CONTENT"
                            },
                            {
                                "path": "/trpc/index.ts",
                                "placeholderReplacerToken": "TRPC_INDEX_CONTENT"
                            },
                            {
                                "path": "/app/page.tsx",
                                "placeholderReplacerToken": "APP_PAGE_CONTENT"
                            },
                            {
                                "path": "/app/tasks/page.tsx",
                                "placeholderReplacerToken": "APP_TASKS_PAGE_CONTENT"
                            },
                            {
                                "path": "/components/TaskCard.tsx",
                                "placeholderReplacerToken": "COMPONENTS_TASKCARD_CONTENT"
                            },
                            {
                                "path": "/components/3DControls.tsx",
                                "placeholderReplacerToken": "COMPONENTS_3DCONTROLS_CONTENT"
                            },
                            {
                                "path": "/components/3DCanvas.tsx",
                                "placeholderReplacerToken": "COMPONENTS_3DCANVAS_CONTENT"
                            },
                            {
                                "path": "/components/TaskMesh.tsx",
                                "placeholderReplacerToken": "COMPONENTS_TASKMESH_CONTENT"
                            },
                            {
                                "path": "/app/layout.tsx",
                                "placeholderReplacerToken": "APP_LAYOUT_CONTENT"
                            },
                            {
                                "path": "/package.json",
                                "placeholderReplacerToken": "PACKAGE_JSON_CONTENT"
                            }
                        ],
                        "wroteFiles": [
                            {
                                "path": "/exported-files.json",
                                "content": ""
                            }
                        ],
                        "systemPrompt": "You are a deployment and feedback manager for a vibe coding platform. Simulate deployment using the scripts, prompt for user feedback, and provide an export option for localStorage files. Output a JSON with deployment status, feedback prompt, and export manifest.",
                        "userInputPrompt": "Simulate deployment and prompt for feedback. Provide localStorage export option. Use the following file contents: [MODELS_TASK_CONTENT] [LIB_DB_CONTENT] [TRPC_ROUTERS_TASK_CONTENT] [TRPC_INDEX_CONTENT] [APP_PAGE_CONTENT] [APP_TASKS_PAGE_CONTENT] [COMPONENTS_TASKCARD_CONTENT] [COMPONENTS_3DCONTROLS_CONTENT] [COMPONENTS_3DCANVAS_CONTENT] [COMPONENTS_TASKMESH_CONTENT] [APP_LAYOUT_CONTENT] [PACKAGE_JSON_CONTENT]. Output as JSON: { deploymentStatus: string, feedbackPrompt: string, exportedFiles: [] }."
                    }
                ]
            }
        ]
    }
}
